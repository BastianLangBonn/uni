clear;
addpath('simulator');
topology = [6,2,1];
evaluationFunction = 'twoPoleEvaluation';
permutationOption(1) = 1;
permutationOption(2) = 2;
permutationOption(4) = 1;
permutationOption(5) = 1;
permutationOption(6) = 1;
elitismOption(1) = 1;
elitismOption(2) = 1;
elitismOption(4) = 2;
elitismOption(5) = 3;
elitismOption(6) = 4; % should use no elitism at all
parameters.targetFitness = 1000;

for i=1:6
  clearvars medianNodes bestNet medianNet;
  for j=1:6
    r = doEsp(topology, permutationOption(i), elitismOption(i),...
      evaluationFunction, parameters);
    medianNodes(j,:) = mean(r.medianNodeFitness,1);
    bestNet(j,:) = r.bestNetFitness;
    medianNet(j,:) = r.medianNetFitness;
  end
  meanMedianNodes(i,:) = mean(medianNodes,1);
  meanBestNet(i,:) = mean(bestNet,1);
  meanMedianNet(i,:) = mean(medianNet,1);
end

figure(1); clf; hold on;
for i=1:6  
  plot(meanMedianNodes(i,:));
end
legend('random','all','random netElitism',...
  'random nodeElitism','random both', 'random no elitism');
title('Mean Median Nodes');

figure(2); clf; hold on;
for i=1:6  
  plot(meanBestNet(i,:));
end
legend('random permutation',...
  'distributed permutation',...
  'random net elitism',...
  'random node elitism',...
  'random both elitisms',...
  'random no elitism');
title('Mean Best Network Fitness');

figure(3); clf; hold on;
for i=1:6  
  plot(meanMedianNet(i,:));
end
legend('random permutation',...
  'distributed permutation',...
  'random net elitism',...
  'random node elitism',...
  'random both elitisms',...
  'random no elitism');
title('Mean Median Network Fitness');



% figure(1);clf;hold on;
% plot(r.medianNetFitness);
% plot(r.bestNetFitness);
% 
% figure(2); clf; hold on;
% plot(r.medianNodeFitness);
% plot(r.bestNodeFitness);
% 
% feval('twoPole_test', r.bestNetwork, @RNNet, 1000, 'vis');